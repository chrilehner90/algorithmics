{"version":3,"sources":["suffixTree.js"],"names":[],"mappings":";;;;;;IAAM,IAAI,GACG,SADP,IAAI,CACI,KAAK,EAAE,GAAG,EAAE;wBADpB,IAAI;;AAEN,MAAI,CAAC,KAAK,GAAG,KAAK,IAAI,SAAS,CAAC;AAChC,MAAI,CAAC,GAAG,GAAG,GAAG,IAAI,SAAS,CAAC;;AAE5B,MAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;;;AAGnB,MAAI,CAAC,SAAS,GAAG;AACf,SAAK,EAAE,IAAI,CAAC,KAAK;AACjB,OAAG,EAAE,IAAI,CAAC,GAAG;GACd,CAAC;AACF,MAAI,CAAC,UAAU,GAAG,SAAS,CAAC;CAC7B;;IAGG,UAAU;AACH,WADP,UAAU,GACA;0BADV,UAAU;;AAEZ,QAAI,CAAC,KAAK,GAAG,CAAC,CAAC;AACf,QAAI,CAAC,CAAC,GAAG,CAAC,CAAC;;AAEX,QAAI,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;AAC9B,QAAI,CAAC,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;;;AAGpC,eAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAChC,QAAI,CAAC,UAAU,GAAG,WAAW,CAAC;GAE/B;;eAZG,UAAU;;WAcC,yBAAC,KAAK,EAAE;AACrB,UAAI,UAAU,GAAG,IAAI,CAAC;AACtB,WAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;;AAEpC,YAAI,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;;;OAGhD;KACF;;;WAEK,gBAAC,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE;AAC/B,UAAI,gBAAgB,GAAG,IAAI,CAAC;AAC5B,UAAI,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;;AAErD,aAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;KACpB;;;WAEc,kBAAC,UAAU,EAAE,KAAK,EAAE,EAElC;;;WAEkB,wBAAG,EAErB;;;SArCG,UAAU;;;AAwChB,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC","file":"suffixTree-compiled.js","sourcesContent":["class Node {\n  constructor(start, end) {\n    this.start = start || undefined;\n    this.end = end || undefined;\n\n    this.children = []; // array of references to the text\n\n    // reference inside the text\n    this.reference = {\n      start: this.start,\n      end: this.end\n    };\n    this.suffixLink = undefined;\n  }\n}\n\nclass SuffixTree {\n  constructor() {\n    this.start = 2;\n    this.i = 2;\n\n    this.virtualRoot = new Node();\n    this.root = new Node(this.start, 2);\n\n    // virtualRoot --> root --> virtualRoot\n    virtualRoot.children.push(root);\n    root.suffixLink = virtualRoot;\n\n  }\n\n  buildSuffixTree(input) {\n    let activeNode = root;\n    for(let i = 2; i < input.length; i++) {\n      // construct T^i from T^i-1\n      let result = this.update(activeNode, input, i);\n      //start = result.start;\n      //activeNode = result.activeNode;\n    }\n  }\n\n  update(activeNode, input, index) {\n    let lastInsertedNode = root;\n    let canonizedNode = this.canonize(activeNode, input);\n    //var resultTestAndSplit = this.testAndSplit(canonizedNode, input, );\n    console.log(index);\n  }\n\n  static canonize(activeNode, input) {\n\n  }\n\n  static testAndSplit() {\n\n  }\n}\n\nmodule.exports = SuffixTree;"]}